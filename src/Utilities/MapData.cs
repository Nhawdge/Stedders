// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using QuickType;
//
//    var mapData = MapData.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class MapData
    {
        [JsonPropertyName("__header__")]
        public Header Header { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("jsonVersion")]
        public string JsonVersion { get; set; }

        [JsonPropertyName("appBuildId")]
        public long AppBuildId { get; set; }

        [JsonPropertyName("nextUid")]
        public long NextUid { get; set; }

        [JsonPropertyName("identifierStyle")]
        public string IdentifierStyle { get; set; }

        [JsonPropertyName("toc")]
        public object[] Toc { get; set; }

        [JsonPropertyName("worldLayout")]
        public string WorldLayout { get; set; }

        [JsonPropertyName("worldGridWidth")]
        public long WorldGridWidth { get; set; }

        [JsonPropertyName("worldGridHeight")]
        public long WorldGridHeight { get; set; }

        [JsonPropertyName("defaultLevelWidth")]
        public long DefaultLevelWidth { get; set; }

        [JsonPropertyName("defaultLevelHeight")]
        public long DefaultLevelHeight { get; set; }

        [JsonPropertyName("defaultPivotX")]
        public long DefaultPivotX { get; set; }

        [JsonPropertyName("defaultPivotY")]
        public long DefaultPivotY { get; set; }

        [JsonPropertyName("defaultGridSize")]
        public long DefaultGridSize { get; set; }

        [JsonPropertyName("defaultEntityWidth")]
        public long DefaultEntityWidth { get; set; }

        [JsonPropertyName("defaultEntityHeight")]
        public long DefaultEntityHeight { get; set; }

        [JsonPropertyName("bgColor")]
        public string BgColor { get; set; }

        [JsonPropertyName("defaultLevelBgColor")]
        public string DefaultLevelBgColor { get; set; }

        [JsonPropertyName("minifyJson")]
        public bool MinifyJson { get; set; }

        [JsonPropertyName("externalLevels")]
        public bool ExternalLevels { get; set; }

        [JsonPropertyName("exportTiled")]
        public bool ExportTiled { get; set; }

        [JsonPropertyName("simplifiedExport")]
        public bool SimplifiedExport { get; set; }

        [JsonPropertyName("imageExportMode")]
        public string ImageExportMode { get; set; }

        [JsonPropertyName("exportLevelBg")]
        public bool ExportLevelBg { get; set; }

        [JsonPropertyName("pngFilePattern")]
        public object PngFilePattern { get; set; }

        [JsonPropertyName("backupOnSave")]
        public bool BackupOnSave { get; set; }

        [JsonPropertyName("backupLimit")]
        public long BackupLimit { get; set; }

        [JsonPropertyName("backupRelPath")]
        public object BackupRelPath { get; set; }

        [JsonPropertyName("levelNamePattern")]
        public string LevelNamePattern { get; set; }

        [JsonPropertyName("tutorialDesc")]
        public object TutorialDesc { get; set; }

        [JsonPropertyName("customCommands")]
        public object[] CustomCommands { get; set; }

        [JsonPropertyName("flags")]
        public object[] Flags { get; set; }

        [JsonPropertyName("defs")]
        public Defs Defs { get; set; }

        [JsonPropertyName("levels")]
        public Level[] Levels { get; set; }

        [JsonPropertyName("worlds")]
        public object[] Worlds { get; set; }

        [JsonPropertyName("dummyWorldIid")]
        public Guid DummyWorldIid { get; set; }
    }

    public partial class Defs
    {
        [JsonPropertyName("layers")]
        public Layer[] Layers { get; set; }

        [JsonPropertyName("entities")]
        public Entity[] Entities { get; set; }

        [JsonPropertyName("tilesets")]
        public Tileset[] Tilesets { get; set; }

        [JsonPropertyName("enums")]
        public Enum[] Enums { get; set; }

        [JsonPropertyName("externalEnums")]
        public object[] ExternalEnums { get; set; }

        [JsonPropertyName("levelFields")]
        public LevelField[] LevelFields { get; set; }
    }

    public partial class Entity
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("tags")]
        public string[] Tags { get; set; }

        [JsonPropertyName("exportToToc")]
        public bool ExportToToc { get; set; }

        [JsonPropertyName("doc")]
        public object Doc { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("resizableX")]
        public bool ResizableX { get; set; }

        [JsonPropertyName("resizableY")]
        public bool ResizableY { get; set; }

        [JsonPropertyName("minWidth")]
        public object MinWidth { get; set; }

        [JsonPropertyName("maxWidth")]
        public object MaxWidth { get; set; }

        [JsonPropertyName("minHeight")]
        public object MinHeight { get; set; }

        [JsonPropertyName("maxHeight")]
        public object MaxHeight { get; set; }

        [JsonPropertyName("keepAspectRatio")]
        public bool KeepAspectRatio { get; set; }

        [JsonPropertyName("tileOpacity")]
        public long TileOpacity { get; set; }

        [JsonPropertyName("fillOpacity")]
        public long FillOpacity { get; set; }

        [JsonPropertyName("lineOpacity")]
        public long LineOpacity { get; set; }

        [JsonPropertyName("hollow")]
        public bool Hollow { get; set; }

        [JsonPropertyName("color")]
        public string Color { get; set; }

        [JsonPropertyName("renderMode")]
        public string RenderMode { get; set; }

        [JsonPropertyName("showName")]
        public bool ShowName { get; set; }

        [JsonPropertyName("tilesetId")]
        public object TilesetId { get; set; }

        [JsonPropertyName("tileRenderMode")]
        public string TileRenderMode { get; set; }

        [JsonPropertyName("tileRect")]
        public object TileRect { get; set; }

        [JsonPropertyName("uiTileRect")]
        public object UiTileRect { get; set; }

        [JsonPropertyName("nineSliceBorders")]
        public object[] NineSliceBorders { get; set; }

        [JsonPropertyName("maxCount")]
        public long MaxCount { get; set; }

        [JsonPropertyName("limitScope")]
        public string LimitScope { get; set; }

        [JsonPropertyName("limitBehavior")]
        public string LimitBehavior { get; set; }

        [JsonPropertyName("pivotX")]
        public long PivotX { get; set; }

        [JsonPropertyName("pivotY")]
        public long PivotY { get; set; }

        [JsonPropertyName("fieldDefs")]
        public LevelField[] FieldDefs { get; set; }
    }

    public partial class LevelField
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("doc")]
        public object Doc { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("type")]
        public string LevelFieldType { get; set; }

        [JsonPropertyName("isArray")]
        public bool IsArray { get; set; }

        [JsonPropertyName("canBeNull")]
        public bool CanBeNull { get; set; }

        [JsonPropertyName("arrayMinLength")]
        public object ArrayMinLength { get; set; }

        [JsonPropertyName("arrayMaxLength")]
        public object ArrayMaxLength { get; set; }

        [JsonPropertyName("editorDisplayMode")]
        public string EditorDisplayMode { get; set; }

        [JsonPropertyName("editorDisplayScale")]
        public long EditorDisplayScale { get; set; }

        [JsonPropertyName("editorDisplayPos")]
        public string EditorDisplayPos { get; set; }

        [JsonPropertyName("editorLinkStyle")]
        public string EditorLinkStyle { get; set; }

        [JsonPropertyName("editorDisplayColor")]
        public object EditorDisplayColor { get; set; }

        [JsonPropertyName("editorAlwaysShow")]
        public bool EditorAlwaysShow { get; set; }

        [JsonPropertyName("editorShowInWorld")]
        public bool EditorShowInWorld { get; set; }

        [JsonPropertyName("editorCutLongValues")]
        public bool EditorCutLongValues { get; set; }

        [JsonPropertyName("editorTextSuffix")]
        public object EditorTextSuffix { get; set; }

        [JsonPropertyName("editorTextPrefix")]
        public object EditorTextPrefix { get; set; }

        [JsonPropertyName("useForSmartColor")]
        public bool UseForSmartColor { get; set; }

        [JsonPropertyName("min")]
        public object Min { get; set; }

        [JsonPropertyName("max")]
        public object Max { get; set; }

        [JsonPropertyName("regex")]
        public object Regex { get; set; }

        [JsonPropertyName("acceptFileTypes")]
        public object AcceptFileTypes { get; set; }

        [JsonPropertyName("defaultOverride")]
        public DefaultOverride DefaultOverride { get; set; }

        [JsonPropertyName("textLanguageMode")]
        public object TextLanguageMode { get; set; }

        [JsonPropertyName("symmetricalRef")]
        public bool SymmetricalRef { get; set; }

        [JsonPropertyName("autoChainRef")]
        public bool AutoChainRef { get; set; }

        [JsonPropertyName("allowOutOfLevelRef")]
        public bool AllowOutOfLevelRef { get; set; }

        [JsonPropertyName("allowedRefs")]
        public string AllowedRefs { get; set; }

        [JsonPropertyName("allowedRefsEntityUid")]
        public object AllowedRefsEntityUid { get; set; }

        [JsonPropertyName("allowedRefTags")]
        public object[] AllowedRefTags { get; set; }

        [JsonPropertyName("tilesetUid")]
        public object TilesetUid { get; set; }
    }

    public partial class DefaultOverride
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("params")]
        public ParamElement[] Params { get; set; }
    }

    public partial class Enum
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("values")]
        public ValueElement[] Values { get; set; }

        [JsonPropertyName("iconTilesetUid")]
        public object IconTilesetUid { get; set; }

        [JsonPropertyName("externalRelPath")]
        public object ExternalRelPath { get; set; }

        [JsonPropertyName("externalFileChecksum")]
        public object ExternalFileChecksum { get; set; }

        [JsonPropertyName("tags")]
        public object[] Tags { get; set; }
    }

    public partial class ValueElement
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("tileRect")]
        public object TileRect { get; set; }

        [JsonPropertyName("color")]
        public long Color { get; set; }
    }

    public partial class Layer
    {
        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("type")]
        public string LayerType { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("doc")]
        public object Doc { get; set; }

        [JsonPropertyName("uiColor")]
        public object UiColor { get; set; }

        [JsonPropertyName("gridSize")]
        public long GridSize { get; set; }

        [JsonPropertyName("guideGridWid")]
        public long GuideGridWid { get; set; }

        [JsonPropertyName("guideGridHei")]
        public long GuideGridHei { get; set; }

        [JsonPropertyName("displayOpacity")]
        public long DisplayOpacity { get; set; }

        [JsonPropertyName("inactiveOpacity")]
        public double InactiveOpacity { get; set; }

        [JsonPropertyName("hideInList")]
        public bool HideInList { get; set; }

        [JsonPropertyName("hideFieldsWhenInactive")]
        public bool HideFieldsWhenInactive { get; set; }

        [JsonPropertyName("canSelectWhenInactive")]
        public bool CanSelectWhenInactive { get; set; }

        [JsonPropertyName("renderInWorldView")]
        public bool RenderInWorldView { get; set; }

        [JsonPropertyName("pxOffsetX")]
        public long PxOffsetX { get; set; }

        [JsonPropertyName("pxOffsetY")]
        public long PxOffsetY { get; set; }

        [JsonPropertyName("parallaxFactorX")]
        public long ParallaxFactorX { get; set; }

        [JsonPropertyName("parallaxFactorY")]
        public long ParallaxFactorY { get; set; }

        [JsonPropertyName("parallaxScaling")]
        public bool ParallaxScaling { get; set; }

        [JsonPropertyName("requiredTags")]
        public object[] RequiredTags { get; set; }

        [JsonPropertyName("excludedTags")]
        public object[] ExcludedTags { get; set; }

        [JsonPropertyName("intGridValues")]
        public object[] IntGridValues { get; set; }

        [JsonPropertyName("intGridValuesGroups")]
        public object[] IntGridValuesGroups { get; set; }

        [JsonPropertyName("autoRuleGroups")]
        public object[] AutoRuleGroups { get; set; }

        [JsonPropertyName("autoSourceLayerDefUid")]
        public object AutoSourceLayerDefUid { get; set; }

        [JsonPropertyName("tilesetDefUid")]
        public long? TilesetDefUid { get; set; }

        [JsonPropertyName("tilePivotX")]
        public long TilePivotX { get; set; }

        [JsonPropertyName("tilePivotY")]
        public long TilePivotY { get; set; }
    }

    public partial class Tileset
    {
        [JsonPropertyName("__cWid")]
        public long CWid { get; set; }

        [JsonPropertyName("__cHei")]
        public long CHei { get; set; }

        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("relPath")]
        public string RelPath { get; set; }

        [JsonPropertyName("embedAtlas")]
        public string EmbedAtlas { get; set; }

        [JsonPropertyName("pxWid")]
        public long PxWid { get; set; }

        [JsonPropertyName("pxHei")]
        public long PxHei { get; set; }

        [JsonPropertyName("tileGridSize")]
        public long TileGridSize { get; set; }

        [JsonPropertyName("spacing")]
        public long Spacing { get; set; }

        [JsonPropertyName("padding")]
        public long Padding { get; set; }

        [JsonPropertyName("tags")]
        public object[] Tags { get; set; }

        [JsonPropertyName("tagsSourceEnumUid")]
        public object TagsSourceEnumUid { get; set; }

        [JsonPropertyName("enumTags")]
        public object[] EnumTags { get; set; }

        [JsonPropertyName("customData")]
        public object[] CustomData { get; set; }

        [JsonPropertyName("savedSelections")]
        public object[] SavedSelections { get; set; }

        [JsonPropertyName("cachedPixelData")]
        public CachedPixelData CachedPixelData { get; set; }
    }

    public partial class CachedPixelData
    {
        [JsonPropertyName("opaqueTiles")]
        public string OpaqueTiles { get; set; }

        [JsonPropertyName("averageColors")]
        public string AverageColors { get; set; }
    }

    public partial class Header
    {
        [JsonPropertyName("fileType")]
        public string FileType { get; set; }

        [JsonPropertyName("app")]
        public string App { get; set; }

        [JsonPropertyName("doc")]
        public Uri Doc { get; set; }

        [JsonPropertyName("schema")]
        public Uri Schema { get; set; }

        [JsonPropertyName("appAuthor")]
        public string AppAuthor { get; set; }

        [JsonPropertyName("appVersion")]
        public string AppVersion { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class Level
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("worldX")]
        public long WorldX { get; set; }

        [JsonPropertyName("worldY")]
        public long WorldY { get; set; }

        [JsonPropertyName("worldDepth")]
        public long WorldDepth { get; set; }

        [JsonPropertyName("pxWid")]
        public long PxWid { get; set; }

        [JsonPropertyName("pxHei")]
        public long PxHei { get; set; }

        [JsonPropertyName("__bgColor")]
        public string BgColor { get; set; }

        [JsonPropertyName("bgColor")]
        public string LevelBgColor { get; set; }

        [JsonPropertyName("useAutoIdentifier")]
        public bool UseAutoIdentifier { get; set; }

        [JsonPropertyName("bgRelPath")]
        public object BgRelPath { get; set; }

        [JsonPropertyName("bgPos")]
        public object LevelBgPos { get; set; }

        [JsonPropertyName("bgPivotX")]
        public double BgPivotX { get; set; }

        [JsonPropertyName("bgPivotY")]
        public double BgPivotY { get; set; }

        [JsonPropertyName("__smartColor")]
        public string SmartColor { get; set; }

        [JsonPropertyName("__bgPos")]
        public object BgPos { get; set; }

        [JsonPropertyName("externalRelPath")]
        public object ExternalRelPath { get; set; }

        [JsonPropertyName("fieldInstances")]
        public LevelFieldInstance[] FieldInstances { get; set; }

        [JsonPropertyName("layerInstances")]
        public LayerInstance[] LayerInstances { get; set; }

        [JsonPropertyName("__neighbours")]
        public object[] Neighbours { get; set; }
    }

    public partial class LevelFieldInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("__value")]
        public ParamElement Value { get; set; }

        [JsonPropertyName("__tile")]
        public object Tile { get; set; }

        [JsonPropertyName("defUid")]
        public long DefUid { get; set; }

        [JsonPropertyName("realEditorValues")]
        public DefaultOverride[] RealEditorValues { get; set; }
    }

    public partial class LayerInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("__cWid")]
        public long CWid { get; set; }

        [JsonPropertyName("__cHei")]
        public long CHei { get; set; }

        [JsonPropertyName("__gridSize")]
        public long GridSize { get; set; }

        [JsonPropertyName("__opacity")]
        public long Opacity { get; set; }

        [JsonPropertyName("__pxTotalOffsetX")]
        public long PxTotalOffsetX { get; set; }

        [JsonPropertyName("__pxTotalOffsetY")]
        public long PxTotalOffsetY { get; set; }

        [JsonPropertyName("__tilesetDefUid")]
        public long? TilesetDefUid { get; set; }

        [JsonPropertyName("__tilesetRelPath")]
        public string TilesetRelPath { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("levelId")]
        public long LevelId { get; set; }

        [JsonPropertyName("layerDefUid")]
        public long LayerDefUid { get; set; }

        [JsonPropertyName("pxOffsetX")]
        public long PxOffsetX { get; set; }

        [JsonPropertyName("pxOffsetY")]
        public long PxOffsetY { get; set; }

        [JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [JsonPropertyName("optionalRules")]
        public object[] OptionalRules { get; set; }

        [JsonPropertyName("intGridCsv")]
        public object[] IntGridCsv { get; set; }

        [JsonPropertyName("autoLayerTiles")]
        public object[] AutoLayerTiles { get; set; }

        [JsonPropertyName("seed")]
        public long Seed { get; set; }

        [JsonPropertyName("overrideTilesetUid")]
        public long? OverrideTilesetUid { get; set; }

        [JsonPropertyName("gridTiles")]
        public GridTile[] GridTiles { get; set; }

        [JsonPropertyName("entityInstances")]
        public EntityInstance[] EntityInstances { get; set; }
    }

    public partial class EntityInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__grid")]
        public long[] Grid { get; set; }

        [JsonPropertyName("__pivot")]
        public long[] Pivot { get; set; }

        [JsonPropertyName("__tags")]
        public string[] Tags { get; set; }

        [JsonPropertyName("__tile")]
        public object Tile { get; set; }

        [JsonPropertyName("__smartColor")]
        public string SmartColor { get; set; }

        [JsonPropertyName("__worldX")]
        public long WorldX { get; set; }

        [JsonPropertyName("__worldY")]
        public long WorldY { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("defUid")]
        public long DefUid { get; set; }

        [JsonPropertyName("px")]
        public long[] Px { get; set; }

        [JsonPropertyName("fieldInstances")]
        public EntityInstanceFieldInstance[] FieldInstances { get; set; }
    }

    public partial class EntityInstanceFieldInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("__value")]
        public Value Value { get; set; }

        [JsonPropertyName("__tile")]
        public object Tile { get; set; }

        [JsonPropertyName("defUid")]
        public long DefUid { get; set; }

        [JsonPropertyName("realEditorValues")]
        public RealEditorValue[] RealEditorValues { get; set; }
    }

    public partial class RealEditorValue
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("params")]
        public Guid[] Params { get; set; }
    }

    public partial class Value
    {
        [JsonPropertyName("entityIid")]
        public Guid EntityIid { get; set; }

        [JsonPropertyName("layerIid")]
        public Guid LayerIid { get; set; }

        [JsonPropertyName("levelIid")]
        public Guid LevelIid { get; set; }

        [JsonPropertyName("worldIid")]
        public Guid WorldIid { get; set; }
    }

    public partial class GridTile
    {
        [JsonPropertyName("px")]
        public long[] Px { get; set; }

        [JsonPropertyName("src")]
        public long[] Src { get; set; }

        [JsonPropertyName("f")]
        public long F { get; set; }

        [JsonPropertyName("t")]
        public long T { get; set; }

        [JsonPropertyName("d")]
        public long[] D { get; set; }

        [JsonPropertyName("a")]
        public long A { get; set; }
    }

    public partial struct ParamElement
    {
        public bool? Bool;
        public long? Integer;

        public static implicit operator ParamElement(bool Bool) => new ParamElement { Bool = Bool };
        public static implicit operator ParamElement(long Integer) => new ParamElement { Integer = Integer };
    }

    public partial class MapData
    {
        public static MapData FromJson(string json) => JsonSerializer.Deserialize<MapData>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MapData self) => JsonSerializer.Serialize(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                ParamElementConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ParamElementConverter : JsonConverter<ParamElement>
    {
        public override bool CanConvert(Type t) => t == typeof(ParamElement);

        public override ParamElement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.Number:
                    var integerValue = reader.GetInt64();
                    return new ParamElement { Integer = integerValue };
                case JsonTokenType.True:
                case JsonTokenType.False:
                    var boolValue = reader.GetBoolean();
                    return new ParamElement { Bool = boolValue };
            }
            throw new Exception("Cannot unmarshal type ParamElement");
        }

        public override void Write(Utf8JsonWriter writer, ParamElement value, JsonSerializerOptions options)
        {
            if (value.Integer != null)
            {
                JsonSerializer.Serialize(writer, value.Integer.Value, options);
                return;
            }
            if (value.Bool != null)
            {
                JsonSerializer.Serialize(writer, value.Bool.Value, options);
                return;
            }
            throw new Exception("Cannot marshal type ParamElement");
        }

        public static readonly ParamElementConverter Singleton = new ParamElementConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
